import subprocess

from xml.etree import ElementTree


class NixDecodeError(Exception):
    pass


def xmlnode2python(xml):
    """
    Recursively turn an XML node a native Python type.
    """
    if xml.tag == 'attrs':
        attrset = {}
        for child in xml:
            for subchild in child:
                attrset[child.attrib['name']] = xmlnode2python(subchild)
        return attrset
    elif xml.tag == 'list':
        return [xmlnode2python(child) for child in xml]
    elif xml.tag in ('string', 'path'):
        return xml.attrib['value']
    elif xml.tag == 'bool':
        return xml.attrib['value'] == "true"
    elif xml.tag == 'null':
        return None
    elif xml.tag == 'int':
        return int(xml.attrib['value'])
    else:
        msg = "Unknown type {0} in instantiated expression.".format(xml.tag)
        raise NixDecodeError(msg)


def xml2python(xmlstr):
    """
    Turn an XML document generated by 'nix-instantiate --xml' and passed as a
    string into a Python type.
    """
    xml = ElementTree.fromstring(xmlstr)
    if xml.tag != 'expr':
        msg = "Instantiated Nix expression doesn't have a root <expr> element."
        raise NixDecodeError(msg)
    return xmlnode2python(xml[0])


def nix2python(path):
    """
    Evaluate the Nix expression file given by path and return it as dict
    consisting of native Python types.
    """
    expr = r'''
      { cfg }: {
        inherit ((import <nixpkgs/nixos/lib/eval-config.nix> {
          modules = [ cfg ];
        }).config) storage fileSystems swapDevices;
      }
    '''
    cmd = ['nix-instantiate', '--eval-only', '--strict', '--xml',
           '--arg', 'cfg', path, '-E', expr]
    return xml2python(subprocess.check_output(cmd))
