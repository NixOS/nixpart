import re
import sys
import logging
import subprocess

from xml.etree import ElementTree

from nixpart.args import parse_args
from nixpart.storage import realize

XMLDECL_RE = re.compile(r'<\?xml.*?>')


class NixDecodeError(Exception):
    pass


def xml2python(xml):
    """
    Turn an XML document generated by 'nix-instantiate --xml' into native
    Python types.
    """
    if xml.tag == 'attrs':
        attrset = {}
        for child in xml:
            for subchild in child:
                attrset[child.attrib['name']] = xml2python(subchild)
        return attrset
    elif xml.tag == 'list':
        return [xml2python(child) for child in xml]
    elif xml.tag in ('string', 'path'):
        return xml.attrib['value']
    elif xml.tag == 'bool':
        return xml.attrib['value'] == "true"
    elif xml.tag == 'null':
        return None
    elif xml.tag == 'int':
        return int(xml.attrib['value'])
    else:
        msg = "Unknown type {0} in instantiated expression.".format(xml.tag)
        raise NixDecodeError(msg)


def nix2python(path):
    """
    Evaluate the Nix expression file given by path and return it as dict
    consisting of native Python types.
    """
    expr = r'''
      let
        cfg = (import <nixpkgs/nixos/lib/eval-config.nix> {{
          modules = [ {} ];
        }}).config;
      in {{ inherit (cfg) storage fileSystems swapDevices; }}
    '''.format(path)
    cmd = ['nix-instantiate', '--eval-only', '--strict', '--xml', '-E', expr]
    output = subprocess.check_output(cmd)
    xml = ElementTree.fromstring(output)
    if xml.tag != 'expr':
        msg = "Instantiated Nix expression doesn't have a root <expr> element."
        raise NixDecodeError(msg)
    return xml2python(xml[0])


def main():
    args = parse_args()

    if args.verbosity > 0:
        levels = [logging.INFO, logging.DEBUG]
        if args.verbosity > len(levels):
            level = levels[-1]
        else:
            level = levels[args.verbosity - 1]

        handler = logging.StreamHandler(sys.stderr)

        for name in ['blivet', 'program']:
            logger = logging.getLogger(name)
            logger.setLevel(level)
            logger.addHandler(handler)

    if args.is_xml:
        rawxml = open(args.nixos_config, 'r').read()
        xml = ElementTree.fromstring(XMLDECL_RE.sub('', rawxml))
        if xml.tag != 'expr':
            msg = "Nix XML tree doesn't have a root <expr> element."
            raise NixDecodeError(msg)
        expr = xml2python(xml[0])
    else:
        expr = nix2python(args.nixos_config)

    realize(expr)
