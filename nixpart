#!/usr/bin/env python
import sys
import string
import argparse
import logging

from nixkickstart import NixKickstart


def indent(ind, val=""):
    return "  " * ind + val


def mkattr(attrs, pre, post, ind):
    out = ""
    for key, val in attrs.iteritems():
        # XXX: Remove "." after fixing up pretty printer.
        if not not set(key) - set(string.ascii_letters + string.digits + "."):
            key = '"{0}"'.format(key.replace('"', r'\"'))
        out += pre + "{0} = {1};".format(key, nixify(val, ind + 1)) + post
    return out


def nixify(data, ind=0):
    out = ""
    if isinstance(data, dict):
        if len(data) == 0:
            out += "{}"
        if len(data) == 0 or (len(data) == 1 and
                              not isinstance(data.values()[0], dict)):
            out += "{" + mkattr(data, " ", " ", ind) + "}"
        else:
            out += "{\n" + mkattr(data, indent(ind + 1), "\n", ind)
            out += indent(ind, "}")
    elif isinstance(data, list):
        out = "[\n"
        for item in data:
            out += indent(ind + 1) + nixify(item, ind + 1) + "\n"
        out += indent(ind) + "]"
    elif isinstance(data, int):
        out += str(data)
    else:
        out += '"{0}"'.format(data.replace('"', r'\"'))
    return out


def get_nixos_config(storage):
    swaps = []
    grub_devices = []
    fstab = {}

    for device in storage.devices:
        label = getattr(device.format, "label", None)
        mount = getattr(device.format, "mountpoint", None)
        path = device.path

        if device.format.type == "disklabel":
            grub_devices.append(path)
        elif device.format.type == "swap":
            if label is not None:
                swaps.append({'label': label})
            else:
                swaps.append({'device': path})
        elif mount is not None and len(mount) > 0:
            fs = {}
            if label is not None:
                fs['label'] = label
            else:
                fs['device'] = path
            fs['fsType'] = device.format.type
            fstab[mount] = fs

    conf = {
        'swapDevices': swaps,
        'fileSystems': fstab,
    }

    if len(grub_devices) > 0:
        conf['boot.loader.grub.devices'] = grub_devices

    return nixify(conf) + "\n"


def main():
    desc = "Create partitions and filesystems based on a kickstart file"
    parser = argparse.ArgumentParser(description=desc)

    parser.add_argument('-v', '--verbose', dest='verbose',
                        action='store_true',
                        help="Show executed commands.")

    parser.add_argument('-m', '--mount-only', dest='mountonly',
                        action='store_true',
                        help="Only try to mount partitions.")

    parser.add_argument('-p', '--print-nixos', dest='printnixos',
                        action='store_true',
                        help="Print NixOS device/fileSystem attributes")

    parser.add_argument(
        'kickstart_file', type=argparse.FileType('r'),
        help="An Anaconda kickstart file (see "
             "http://fedoraproject.org/wiki/Anaconda/Kickstart"
             "for format)"
    )

    args = parser.parse_args()

    if args.verbose:
        program_log = logging.getLogger("program")
        program_log.setLevel(logging.DEBUG)
        program_log.addHandler(logging.StreamHandler(sys.stderr))

    ks = NixKickstart(args.kickstart_file.read().replace("\\\n", ""),
                      mount_only=args.mountonly)
    storage = ks.run()

    if args.printnixos:
        sys.stdout.write(get_nixos_config(storage))

if __name__ == '__main__':
    main()
